// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domainrepotest

import (
	"context"
	"github.com/doyyan/kubernetes/internal/app/domain"
	"github.com/sirupsen/logrus"
	"sync"
)

// IDeploymentRepoMock is a mock implementation of domainrepo.IDeploymentRepo.
//
// 	func TestSomethingThatUsesIDeploymentRepo(t *testing.T) {
//
// 		// make and configure a mocked domainrepo.IDeploymentRepo
// 		mockedIDeploymentRepo := &IDeploymentRepoMock{
// 			CreateFunc: func(ctx context.Context, logger *logrus.Logger, deployment domain.Deployment) error {
// 				panic("mock out the Create method")
// 			},
// 			DeleteFunc: func(ctx context.Context, logger *logrus.Logger, deployment domain.Deployment) error {
// 				panic("mock out the Delete method")
// 			},
// 			GetFunc: func(ctx context.Context, logger *logrus.Logger, deployment domain.Deployment) (domain.Deployment, error) {
// 				panic("mock out the Get method")
// 			},
// 			GetRolloutStatusFunc: func(ctx context.Context, logger *logrus.Logger, deployment domain.Deployment) (string, bool, error) {
// 				panic("mock out the GetRolloutStatus method")
// 			},
// 			ListFunc: func(ctx context.Context, logger *logrus.Logger) ([]domain.Deployment, error) {
// 				panic("mock out the List method")
// 			},
// 		}
//
// 		// use mockedIDeploymentRepo in code that requires domainrepo.IDeploymentRepo
// 		// and then make assertions.
//
// 	}
type IDeploymentRepoMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, logger *logrus.Logger, deployment domain.Deployment) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, logger *logrus.Logger, deployment domain.Deployment) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, logger *logrus.Logger, deployment domain.Deployment) (domain.Deployment, error)

	// GetRolloutStatusFunc mocks the GetRolloutStatus method.
	GetRolloutStatusFunc func(ctx context.Context, logger *logrus.Logger, deployment domain.Deployment) (string, bool, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, logger *logrus.Logger) ([]domain.Deployment, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Logger is the logger argument value.
			Logger *logrus.Logger
			// Deployment is the deployment argument value.
			Deployment domain.Deployment
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Logger is the logger argument value.
			Logger *logrus.Logger
			// Deployment is the deployment argument value.
			Deployment domain.Deployment
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Logger is the logger argument value.
			Logger *logrus.Logger
			// Deployment is the deployment argument value.
			Deployment domain.Deployment
		}
		// GetRolloutStatus holds details about calls to the GetRolloutStatus method.
		GetRolloutStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Logger is the logger argument value.
			Logger *logrus.Logger
			// Deployment is the deployment argument value.
			Deployment domain.Deployment
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Logger is the logger argument value.
			Logger *logrus.Logger
		}
	}
	lockCreate           sync.RWMutex
	lockDelete           sync.RWMutex
	lockGet              sync.RWMutex
	lockGetRolloutStatus sync.RWMutex
	lockList             sync.RWMutex
}

// Create calls CreateFunc.
func (mock *IDeploymentRepoMock) Create(ctx context.Context, logger *logrus.Logger, deployment domain.Deployment) error {
	if mock.CreateFunc == nil {
		panic("IDeploymentRepoMock.CreateFunc: method is nil but IDeploymentRepo.Create was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Logger     *logrus.Logger
		Deployment domain.Deployment
	}{
		Ctx:        ctx,
		Logger:     logger,
		Deployment: deployment,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, logger, deployment)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedIDeploymentRepo.CreateCalls())
func (mock *IDeploymentRepoMock) CreateCalls() []struct {
	Ctx        context.Context
	Logger     *logrus.Logger
	Deployment domain.Deployment
} {
	var calls []struct {
		Ctx        context.Context
		Logger     *logrus.Logger
		Deployment domain.Deployment
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *IDeploymentRepoMock) Delete(ctx context.Context, logger *logrus.Logger, deployment domain.Deployment) error {
	if mock.DeleteFunc == nil {
		panic("IDeploymentRepoMock.DeleteFunc: method is nil but IDeploymentRepo.Delete was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Logger     *logrus.Logger
		Deployment domain.Deployment
	}{
		Ctx:        ctx,
		Logger:     logger,
		Deployment: deployment,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, logger, deployment)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedIDeploymentRepo.DeleteCalls())
func (mock *IDeploymentRepoMock) DeleteCalls() []struct {
	Ctx        context.Context
	Logger     *logrus.Logger
	Deployment domain.Deployment
} {
	var calls []struct {
		Ctx        context.Context
		Logger     *logrus.Logger
		Deployment domain.Deployment
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *IDeploymentRepoMock) Get(ctx context.Context, logger *logrus.Logger, deployment domain.Deployment) (domain.Deployment, error) {
	if mock.GetFunc == nil {
		panic("IDeploymentRepoMock.GetFunc: method is nil but IDeploymentRepo.Get was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Logger     *logrus.Logger
		Deployment domain.Deployment
	}{
		Ctx:        ctx,
		Logger:     logger,
		Deployment: deployment,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, logger, deployment)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedIDeploymentRepo.GetCalls())
func (mock *IDeploymentRepoMock) GetCalls() []struct {
	Ctx        context.Context
	Logger     *logrus.Logger
	Deployment domain.Deployment
} {
	var calls []struct {
		Ctx        context.Context
		Logger     *logrus.Logger
		Deployment domain.Deployment
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetRolloutStatus calls GetRolloutStatusFunc.
func (mock *IDeploymentRepoMock) GetRolloutStatus(ctx context.Context, logger *logrus.Logger, deployment domain.Deployment) (string, bool, error) {
	if mock.GetRolloutStatusFunc == nil {
		panic("IDeploymentRepoMock.GetRolloutStatusFunc: method is nil but IDeploymentRepo.GetRolloutStatus was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Logger     *logrus.Logger
		Deployment domain.Deployment
	}{
		Ctx:        ctx,
		Logger:     logger,
		Deployment: deployment,
	}
	mock.lockGetRolloutStatus.Lock()
	mock.calls.GetRolloutStatus = append(mock.calls.GetRolloutStatus, callInfo)
	mock.lockGetRolloutStatus.Unlock()
	return mock.GetRolloutStatusFunc(ctx, logger, deployment)
}

// GetRolloutStatusCalls gets all the calls that were made to GetRolloutStatus.
// Check the length with:
//     len(mockedIDeploymentRepo.GetRolloutStatusCalls())
func (mock *IDeploymentRepoMock) GetRolloutStatusCalls() []struct {
	Ctx        context.Context
	Logger     *logrus.Logger
	Deployment domain.Deployment
} {
	var calls []struct {
		Ctx        context.Context
		Logger     *logrus.Logger
		Deployment domain.Deployment
	}
	mock.lockGetRolloutStatus.RLock()
	calls = mock.calls.GetRolloutStatus
	mock.lockGetRolloutStatus.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *IDeploymentRepoMock) List(ctx context.Context, logger *logrus.Logger) ([]domain.Deployment, error) {
	if mock.ListFunc == nil {
		panic("IDeploymentRepoMock.ListFunc: method is nil but IDeploymentRepo.List was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Logger *logrus.Logger
	}{
		Ctx:    ctx,
		Logger: logger,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, logger)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedIDeploymentRepo.ListCalls())
func (mock *IDeploymentRepoMock) ListCalls() []struct {
	Ctx    context.Context
	Logger *logrus.Logger
} {
	var calls []struct {
		Ctx    context.Context
		Logger *logrus.Logger
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}
